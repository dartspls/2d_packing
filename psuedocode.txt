place object in top right
locked in place = false
while new object NOT locked in place
    can move down = true
    can move left = true
    while new object can move down
        can move down = move down
    end while

    while new object can move left
        can move left = move left
    end while

    locked in place = locked
end while

if height of new object > current max height
    current max height <- height of new object
end if



Generate a neighbourhood from solution
Move operator: swap one piece with any other piece (except itself) OR rotate any piece
Each piece can be in one of two orientations (rectangles being rotated)
If we use letters with upper and lower cases to represent the rectangles (e.g. a = orientation 1 A = orientation 2) then:

a
B
c
d
Neightbourhood N(S) has size 10
A a a a  B c d a a a
B b B B  a B B c d B
c c C c  c a c B c d
d d d D  d d a d B c

Size = n + sum of 1 to n-1 where n is number of items in solution
simplifies to sum of numbers 1 to n
n = 4
4 + (1 + 2 + 3) = 10

n = 200
200 + (1 + 2 + 3 + ... + 199) = 20100




Search:

Generate initial solution S
Improvement made = true
while(improvement made):
    improvement made = false
    Generate neighbourhood N(S)
    Evaluate all S in N(S) keeping track of best S
    if S better than best S:
        improvement made = true
        set best S to S
    endif
end while

swap:
    for i = 0, i < len - 1
        for j = i + 1, j < len
            swap A[i] with A[j]
            j ++
        endfor
        i ++
    endfor
    